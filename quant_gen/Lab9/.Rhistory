library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
library(ggplot2)
Xa.all <- as.matrix(hapmap.geno.mx)
library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
library(ggplot2)
hapmap.pheno.mx <- read.table("./HapMap_phenotypes.tsv", sep = "\t")
hapmap.geno.mx <- read.table("./HapMap_genotypes.tsv", sep = "\t")
hapmap.gene.info.df <- read.table("./HapMap_gene_info.tsv", sep = "\t")
hapmap.snp.info.df <- read.table("./HapMap_snp_info.tsv", sep = "\t")
dim(hapmap.pheno.mx)
dim(hapmap.geno.mx)
dim(hapmap.gene.info.df)
dim(hapmap.snp.info.df)
# Function to return pval from phenotype and genotype inputs
get_pval <- function(phenotypes, genotypes){
N.samples <- length(phenotypes)
X.mx <- cbind(1,genotypes)
MLE.beta <- solve(t(X.mx) %*% X.mx) %*% t(X.mx) %*% phenotypes
y.hat <- X.mx %*% MLE.beta
SSM <- sum((y.hat - mean(phenotypes))^2)
SSE <- sum((phenotypes - y.hat)^2)
df.M <- 1
df.E <- N.samples - 2
MSM <- SSM / df.M
MSE <- SSE / df.E
Fstatistic <- MSM / MSE
return(pf(Fstatistic, df.M, df.E,lower.tail = FALSE))
}
# Initialize data structure to store pvals
pval.mx <- matrix(NA, nrow = ncol(hapmap.pheno.mx), ncol = ncol(hapmap.geno.mx))
# Loop through each phenotype and polymorphic site pair
for (p in 1:dim(hapmap.pheno.mx)[2]){
for (g in 1:dim(hapmap.geno.mx)[2]){
pval.mx[p,g] <- get_pval( hapmap.pheno.mx[,p], hapmap.geno.mx[,g] )
}
}
pval.mx <- data.frame(t(pval.mx))
# Using ggplot...
ggplot(pval.mx,aes(1:nrow(pval.mx),-log10(X1))) +
geom_point() +
labs(x="Variant",y="-log10(pval)",title="Manhattan Plot for Phenotype 1")
# Compare with Basic R plot:
# plot(seq(nrow(pval.mx)), -log10(pval.mx[,1]),
#      xlab="Variant", ylab="-log10(pval)",
#      main="Manhattan Plot for Phenotype 1")
# Initialize new columns in pval.mx to store geno and pheno info
pval.mx$chrom=rep("unknown",nrow(pval.mx))
pval.mx$pos=rep("unknown",nrow(pval.mx))
hapmap.snp.info.df$chrom <- as.character(hapmap.snp.info.df$chrom)
hapmap.snp.info.df$id <- as.character(hapmap.snp.info.df$id)
#
i=1
for(rs in colnames(hapmap.geno.mx)){
if(any(hapmap.snp.info.df$id == rs)){
pval.mx$chrom[i] <- hapmap.snp.info.df$chrom[hapmap.snp.info.df$id == rs]
pval.mx$pos[i] <- hapmap.snp.info.df$pos[hapmap.snp.info.df$id == rs]
}
i=i+1
}
head(pval.mx)
phenotypeIndex <- 1
minpval.row <- which.min(pval.mx[,phenotypeIndex])
pheno_name <- colnames(hapmap.pheno.mx)[phenotypeIndex]
geno_name <- colnames(hapmap.geno.mx)[minpval.row]
gene.info.vec <- hapmap.gene.info.df[which(hapmap.gene.info.df$probe == pheno_name),]
genotype.info.vec <- hapmap.snp.info.df[which(hapmap.snp.info.df$id == geno_name ),]
cat( "Gene = ", pheno_name ,"| ", paste0("chr", gene.info.vec$chromosome) ,"Start =", gene.info.vec$start,"End =", gene.info.vec$end,"\n" )
cat( "SNP = ", geno_name ,"| ", toString(genotype.info.vec$chrom) ,"Position =", genotype.info.vec$position,"\n" )
# install.packages("ggrepel")
library(ggrepel)
pval.mx$sigRsid <- NA
pval.mx$sigRsid[phenotypeIndex] <- colnames(hapmap.geno.mx)[minpval.row]
ggplot(pval.mx,aes(1:nrow(pval.mx),-log10(X1), label=sigRsid))+geom_point(aes(color=chrom))+
labs(x="Variant",y="-log10(pval)",title=paste("Manhattan Plot for eQTL", colnames(hapmap.pheno.mx)[phenotypeIndex]))+
geom_label_repel()
df <- data.frame(y=rnorm(100),x=rnorm(100,mean=2)+runif(100,min=-0.1,max=0.1))
model <- lm(data = df, y ~ x)
model
summary(model)
hapmap.pheno.mx <- read.table("./HapMap_phenotypes.tsv", sep = "\t")
hapmap.geno.mx <- read.table("./HapMap_genotypes.tsv", sep = "\t")
hapmap.gene.info.df <- read.table("./HapMap_gene_info.tsv", sep = "\t")
hapmap.snp.info.df <- read.table("./HapMap_snp_info.tsv", sep = "\t")
Xa.all <- as.matrix(hapmap.geno.mx)
regression.df <- data.frame("Y" = hapmap.pheno.mx[,1], "Xa" = Xa.all[,1])
model <- lm(Y ~ Xa, data = regression.df)
pval <- summary(model)$coefficients[2,4]
summary(model)
ummary(model)$coefficients[2,]
summary(model)$coefficients[2,]
pval.mx[1,1]
pval
pval.mx[1,1]
pval
pvals <- apply(Xa.all, 2, function(x,y) summary(lm(y ~ x))$coefficients[2,4], hapmap.pheno.mx[,1])
head(pvals)
head(pval.mx[,1])
df <- data.frame(y=rnorm(100), x=rnorm(100,mean=2)+runif(100,min=-0.1,max=0.1), covar=rnorm(100,mean=5))
model <- lm(data = df, y ~ x + covar)
model
library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=FALSE, echo = TRUE)
library(ggplot2)
phenotypes <- read.table("./HapMap_phenotypes.tsv", header = T)
phenotypes <- read.table("./HapMap_phenotypes.tsv", header = T)
genotypes <- read.table("./HapMap_genotypes.tsv", header = T)
Xa.all <- as.matrix(genotypes)
Xd.all <- 1- 2*abs(Xa.all)
# Regression on the first genotype and first phenotypein the hapmap data
regression.df <- data.frame("Y" = phenotypes[,1], "Xa" = Xa.all[,1], "Xd" = Xd.all[,1])
lm(Y ~ Xa + Xd, data = regression.df)
# MLE beta from Lab 7
library(MASS)
X.mx <- cbind(1, Xa.all[,1],Xd.all[,1])
Y <- as.matrix(phenotypes[,1])
MLE_beta <- ginv(t(X.mx) %*% X.mx) %*% t(X.mx) %*% Y
MLE_beta
x=rnorm(100,mean=2)
y=3*x -1 + rnorm(100)
df <- data.frame(y=y, x=x)
model <- lm(data = df, y ~ x)
model
df <- data.frame(y=rnorm(100), x=rnorm(100,mean=2)+runif(100,min=-0.1,max=0.1), covar=rnorm(100,mean=5))
model <- lm(data = df, y ~ x + covar)
model
df <- data.frame(x=rnorm(100,mean=-2), z=rnorm(100,mean=5))
df$y <- df$x + 2*df$z
model <- lm(data = df, y ~ x + z)
model
x = rnorm(100,mean=2)
covar = rnorm(100,mean=5)
y = 2*x + 3*covar + runif(100,min=-0.1,max=0.1)
df <- data.frame(y, x, covar)
model <- lm(data = df, y ~ x + covar)
model
df <- data.frame(x=rnorm(100,mean=-2), z=rnorm(100,mean=5))
df$y <- df$x + 2*df$z
model <- lm(data = df, y ~ x + z)
model
pvalOrig <- summary(lm(hapmap.pheno.mx[,2] ~ hapmap.geno.mx[,1]))$coefficients[2,4]
pvalOrig
pvalAlter <- summary(lm(alter.hapmap.pheno.mx[,2] ~ hapmap.geno.mx[,1]))$coefficients[2,4]
peopleToChange <- which(hapmap.geno.mx[,2]==1)[1:20]
alter.hapmap.pheno.mx <- data.frame(hapmap.pheno.mx)
alter.hapmap.pheno.mx[peopleToChange,2] <- alter.hapmap.pheno.mx[peopleToChange,2] + 1
changeStatus <- rep(0, nrow(hapmap.geno.mx))
changeStatus[peopleToChange] <- 1
changeStatus <- as.factor(changeStatus)
pvalOrig <- summary(lm(hapmap.pheno.mx[,2] ~ hapmap.geno.mx[,1]))$coefficients[2,4]
pvalOrig
pvalAlter <- summary(lm(alter.hapmap.pheno.mx[,2] ~ hapmap.geno.mx[,1]))$coefficients[2,4]
pvalAlter
pvalCovar <- summary(lm(alter.hapmap.pheno.mx[,2] ~ hapmap.geno.mx[,1] + changeStatus))$coefficients[2,4]
pvalCovar
library(knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE, echo = TRUE)
library(ggplot2)
set.seed(1987)
x <- 2 + rnorm(300,0,1)
y <- 0.5 + 1*x + rnorm(300,0,1)
pca_example.data <- read.csv("pca_example_data.csv", row.names = 1, comment.char = "#", stringsAsFactors = FALSE)
plot(pca_example.data[,1],pca_example.data[,2])
pca_example.data.center <- scale(pca_example.data, center = TRUE, scale = FALSE)
plot(pca_example.data.center[,1], pca_example.data.center[,2], xlim = c(-5,5), ylim = c(-5,5) )
arrows(x0 = 0, y0 = 0, x1 = 1, y1 = 0, col = "red", lwd = 3, length = 0.15)
arrows(x0 = 0, y0 = 0, x1 = 0, y1 = 1, col = "red", lwd = 3, length = 0.15)
# prcomp more efficient
pca.result <- prcomp(pca_example.data.center)
str(pca.result)
pca.result$sdev
((pca.result$sdev^2)/sum(pca.result$sdev^2))*100
summary(pca.result)
pca.result$rotation
plot(example.data.center[,1], example.data.center[,2], xlim = c(-5,5), ylim = c(-5,5))
set.seed(1987)
x <- 2 + rnorm(300,0,1)
y <- 0.5 + 1*x + rnorm(300,0,1)
pca_example.data <- read.csv("pca_example_data.csv", row.names = 1, comment.char = "#", stringsAsFactors = FALSE)
plot(pca_example.data[,1],pca_example.data[,2])
pca_example.data.center <- scale(pca_example.data, center = TRUE, scale = FALSE)
plot(pca_example.data.center[,1], pca_example.data.center[,2], xlim = c(-5,5), ylim = c(-5,5) )
arrows(x0 = 0, y0 = 0, x1 = 1, y1 = 0, col = "red", lwd = 3, length = 0.15)
arrows(x0 = 0, y0 = 0, x1 = 0, y1 = 1, col = "red", lwd = 3, length = 0.15)
# prcomp more efficient
pca.result <- prcomp(pca_example.data.center)
str(pca.result)
pca.result$sdev
((pca.result$sdev^2)/sum(pca.result$sdev^2))*100
summary(pca.result)
pca.result$rotation
plot(pca.result$x[,1], pca.result$x[,2], xlim = c(-5,5), ylim = c(-5,5))
# MLE beta from Lab 7
library(MASS)
X.mx <- cbind(1, Xa.all[,1],Xd.all[,1])
Y <- as.matrix(phenotypes[,1])
MLE_beta <- ginv(t(X.mx) %*% X.mx) %*% t(X.mx) %*% Y
MLE_beta
linear.fit <- lm(Y ~ Xa + Xd, data = regression.df)
lm.summary <- summary(linear.fit)
print(lm.summary)
set.seed(2019)
n_samples <- nrow(phenotypes)
# RECREATE SIMULATION COVARIATES LATER with different distr and params...
C.all <- data.frame(c1=rnorm(n_samples,-1, 1),
c2=rnorm(n_samples, 3, 2),
c3=rnorm(n_samples, 1,.5),
c4=rnorm(n_samples, 0, 3) )
# c( \beta_mu, \beta_a, \beta_d, \beta_c1, \beta_c2, \beta_c3, \beta_c4 )
coeff <- c (2,      .7,      .6,       0,        .3,       .7,      .2 )
fake_pheno_w_covariates <- coeff[1]*1 +
coeff[2] * Xa.all[,150] +
coeff[3] * Xd.all[,150] +
coeff[4] * C.all[,1] +
coeff[5] * C.all[,2] +
coeff[6] * C.all[,3] +
coeff[7] * C.all[,4] +
rnorm(n_samples, 0, 1)
n_polymorphic_sites <- ncol(Xa.all)
fake_pvals <- matrix(NA, nrow=n_polymorphic_sites, ncol=2)
fake_coefficients <- matrix(NA, nrow=n_polymorphic_sites, ncol=3)
# Model geno(-) covariates(+)
fake_lm_df <- data.frame( Y=fake_pheno_w_covariates,
C1=C.all[,1], C2=C.all[,2],
C3=C.all[,3], C4=C.all[,4])
fake_theta0_lm <- lm(Y ~ C1 + C2 + C3 + C4, data=fake_lm_df)
fake_theta0_sum <- summary(fake_theta0_lm)
fake_theta0_fstat <- fake_theta0_sum$fstatistic
pf( fake_theta0_fstat[1], fake_theta0_fstat[2], fake_theta0_fstat[3])
fake_theta0_pval <- pf( fake_theta0_fstat[1], fake_theta0_fstat[2], fake_theta0_fstat[3], lower.tail = TRUE )
for( i in 1:n_polymorphic_sites ){
fake_lm_df <- data.frame( Y=fake_pheno_w_covariates,
Xa=Xa.all[,i], Xd=Xd.all[,i],
C1=C.all[,1], C2=C.all[,2],
C3=C.all[,3], C4=C.all[,4])
# Model geno(+) covariates(-)
fake_geno_lm <- lm(Y ~ Xa + Xd, data=fake_lm_df)
fake_geno_sum <- summary(fake_geno_lm)
fake_geno_fstat <- fake_geno_sum$fstatistic
fake_pvals[i,1] <- pf( fake_geno_fstat[1], fake_geno_fstat[2], fake_geno_fstat[3], lower.tail = TRUE )
# Model geno(+) covariates(+) with both
fake_theta1_lm <- lm(Y ~ Xa + Xd + C1 + C2 + C3 + C4, data=fake_lm_df)
fake_theta1_sum <- summary(fake_theta1_lm)
# Get SSE for theta0 params and theta1 params to calculate Fstatistic
sse_theta0 <- sum( (fake_theta0_sum$residuals)^2 )
sse_theta1 <- sum( (fake_theta1_sum$residuals)^2 )
fstat <- (( sse_theta0-sse_theta1 )/2) / (sse_theta1/(n_samples-3))
# Get pval from Fstatistic
fake_pvals[i,2] <- pf( fstat, 2, n_samples-3, lower.tail = TRUE)
}
expected_pvals <- -log10(seq( 1, 1/n_polymorphic_sites, by=-1/n_polymorphic_sites))
observed_pvals_wgen <- -log10(fake_pvals[,1])
observed_pvals_both <- -log10(fake_pvals[,2])
par(mfrow=c(1,3))
plot(expected_pvals, expected_pvals )
plot(expected_pvals, sort(observed_pvals_wgen))
abline(a=0,b=1, col='red')
abline(h=-log10(fake_theta0_pval), col='blue')
plot(expected_pvals, sort(observed_pvals_both))
abline(a=0,b=1, col='red')
abline(h=-log10(fake_theta0_pval), col='blue')
par(mfrow=c(1,2))
bonf_corr <- -log10(0.05/n_polymorphic_sites)
plot(observed_pvals_wgen)
abline(h=bonf_corr, col='red')
abline(h=-log10(fake_theta0_pval), col='blue')
plot(observed_pvals_both)
abline(h=bonf_corr, col='red')
abline(h=-log10(fake_theta0_pval), col='blue')
i <- 150
fake_lm_df <- data.frame( Y=fake_pheno_w_covariates,
Xa=Xa.all[,i], Xd=Xd.all[,i],
C1=C.all[,1], C2=C.all[,2],
C3=C.all[,3], C4=C.all[,4])
# Model geno(+) covariates(-)
fake_geno_lm <- lm(Y ~ Xa + Xd, data=fake_lm_df)
fake_geno_sum <- summary(fake_geno_lm)
fake_geno_fstat <- fake_geno_sum$fstatistic
fake_pvals[i,1] <- pf( fake_geno_fstat[1], fake_geno_fstat[2], fake_geno_fstat[3], lower.tail = TRUE )
# Model geno(+) covariates(+) with both
fake_theta1_lm <- lm(Y ~ Xa + Xd + C1 + C2 + C3 + C4, data=fake_lm_df)
fake_theta1_sum <- summary(fake_theta1_lm)
summary(model)$coefficients[2,]
fake_geno_sum$coefficients[2,4]
fake_geno_sum$coefficients
fake_geno_sum$coefficients[3,4]
fake_theta1_sum$coefficients[3,4]
fake_theta1_sum$coefficients[2,4]
fake_theta1_sum$coefficients[4,4]
fake_theta1_sum$coefficients[5,4]
fake_theta1_sum$coefficients
i <- 15
fake_lm_df <- data.frame( Y=fake_pheno_w_covariates,
Xa=Xa.all[,i], Xd=Xd.all[,i],
C1=C.all[,1], C2=C.all[,2],
C3=C.all[,3], C4=C.all[,4])
# Model geno(+) covariates(+) with both
fake_theta1_lm <- lm(Y ~ Xa + Xd + C1 + C2 + C3 + C4, data=fake_lm_df)
fake_theta1_sum <- summary(fake_theta1_lm)
C3=C.all[,3], C4=C.all[,4])fake_theta1_sum
fake_theta1_sum$coefficients
