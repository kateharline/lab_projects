norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(as.data.frame(norm_sim1[1]), aes(norm_sim1[1]) +
bins = 100,
View(norm_sim1)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(as.data.frame(norm_sim1['means']), aes(norm_sim1['means']) +
bins = 100,
norm_sim1['means']
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
norm_sim1['means']
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(norm_sim1$means, aes(as.vector(norm_sim1$means)) +
bins = 100,
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
norm_sim1['means']
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(norm_sim1$means, aes(as.vector(norm_sim1$means)) +
geom_histogram(aes(y=..density..),
bins = 100,
col = 'turquoise4',
fill = 'turquoise2') +
labs(title = 'Histogram of 1000 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(0, 1))
norm_sim1$means
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
norm_sim1$means
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(as.data.frame(norm_sim1$means), aes(norm_sim1$means) +
geom_histogram(aes(y=..density..),
bins = 100,
col = 'turquoise4',
fill = 'turquoise2') +
labs(title = 'Histogram of 1000 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(0, 1))
typeof(norm_sim1$means)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
norm_sim1$means
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1',) + labs(title = 'Means Histogram M=10')
hist_means2
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency')
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')
hist_vars2 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency')
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')
hist_vars2 <- ggplot(data.frame(norm_sim2$var), aes(norm_sim2$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency') + xlim(0, 3)
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')+ xlim(0, 3)
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')+ xlim(0, 3)
hist_vars2 <- ggplot(data.frame(norm_sim2$var), aes(norm_sim2$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')+ xlim(0, 3)
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
library(ggplot2)
library(gridExtra)
make_bernoullis <- function(M, n, p){
# create vector to store means for each experiment
means <- vector()
for (i in 1:M){
# make sample
s <- rbinom(n, 1, p)
# find mean
sample_mean <- mean(s)
# store sample mean
means <- c(means, sample_mean)
}
return(means)
}
# M=1000,n=10,p=0.3
sim1 <- make_bernoullis(1000, 10, 0.3)
# M=1000,n=1000,p=0.3
sim2 <- make_bernoullis(1000, 1000, 0.3)
# plot hists
df_sim1 <- data.frame(sim1)
df_sim2 <- data.frame(sim2)
hist1 <- ggplot(df_sim1, aes(sim1)) +
geom_histogram(aes(y=..density..),
bins = 10,
col = 'orchid3',
fill = 'orchid1') +
labs(title = 'Histogram of 10 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-0.1, 1)
hist2 <- ggplot(df_sim2, aes(sim2)) +
geom_histogram(aes(y=..density..),
bins = 100,
col = 'turquoise4',
fill = 'turquoise2') +
labs(title = 'Histogram of 1000 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-0.1, 1)
grid.arrange(hist1, hist2, nrow = 1, ncol = 2)
library(ggplot2)
library(gridExtra)
make_bernoullis <- function(M, n, p){
# create vector to store means for each experiment
means <- vector()
for (i in 1:M){
# make sample
s <- rbinom(n, 1, p)
# find mean
sample_mean <- mean(s)
# store sample mean
means <- c(means, sample_mean)
}
return(means)
}
# M=1000,n=10,p=0.3
sim1 <- make_bernoullis(1000, 10, 0.3)
# M=1000,n=1000,p=0.3
sim2 <- make_bernoullis(1000, 1000, 0.3)
# plot hists
df_sim1 <- data.frame(sim1)
df_sim2 <- data.frame(sim2)
hist1 <- ggplot(df_sim1, aes(sim1)) +
geom_histogram(aes(y=..density..),
bins = 10,
col = 'orchid3',
fill = 'orchid1') +
labs(title = 'Histogram of 10 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-0.1, 1.1)
hist2 <- ggplot(df_sim2, aes(sim2)) +
geom_histogram(aes(y=..density..),
bins = 100,
col = 'turquoise4',
fill = 'turquoise2') +
labs(title = 'Histogram of 1000 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-0.1, 1.1)
grid.arrange(hist1, hist2, nrow = 1, ncol = 2)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency') + xlim(-0.1, 3)
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')+ xlim(-0.1, 3)
hist_vars2 <- ggplot(data.frame(norm_sim2$var), aes(norm_sim2$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vars <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vars <- c(vars, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vars
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency') + xlim(-0.1, 3)
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')+ xlim(-0.1, 3)
hist_vars2 <- ggplot(data.frame(norm_sim2$var), aes(norm_sim2$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
library(ggplot2)
library(gridExtra)
make_bernoullis <- function(M, n, p){
# create vector to store means for each experiment
means <- vector()
for (i in 1:M){
# make sample
s <- rbinom(n, 1, p)
# find mean
sample_mean <- mean(s)
# store sample mean
means <- c(means, sample_mean)
}
return(means)
}
# M=1000,n=10,p=0.3
sim1 <- make_bernoullis(1000, 10, 0.3)
# M=1000,n=1000,p=0.3
sim2 <- make_bernoullis(1000, 1000, 0.3)
# plot hists
df_sim1 <- data.frame(sim1)
df_sim2 <- data.frame(sim2)
hist1 <- ggplot(df_sim1, aes(sim1)) +
geom_histogram(aes(y=..density..),
bins = 10,
col = 'orchid3',
fill = 'orchid1') +
labs(title = 'Histogram of 10 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-1, 2)
hist2 <- ggplot(df_sim2, aes(sim2)) +
geom_histogram(aes(y=..density..),
bins = 100,
col = 'turquoise4',
fill = 'turquoise2') +
labs(title = 'Histogram of 1000 Samples', x = expression(hat(p)), y = 'Frequency') + xlim(-1, 2)
grid.arrange(hist1, hist2, nrow = 1, ncol = 2)
# likelihood function mu
l_mu = function(mu){
# sample
sigma_sq <- 1
s <- c(2.22, 0.98, 2.63, 3.33, 1.86, 3.25, 2.25, 2.92, 1.78, 1.01)
likelihood <- 1
for(x in s){
likelihood <- likelihood*1/(sqrt(2*pi*sigma_sq))exp(-(x-mu)^2/(2*sigma_sq))
# likelihood function mu
l_mu = function(mu){
# sample
sigma_sq <- 1
s <- c(2.22, 0.98, 2.63, 3.33, 1.86, 3.25, 2.25, 2.92, 1.78, 1.01)
likelihood <- 1
for(x in s){
likelihood <- likelihood*1/(sqrt(2*pi*sigma_sq))*exp(-(x-mu)^2/(2*sigma_sq))
}
return(likelihood)
}
# likelihood function sigma_sq
l_ss = function(sigma_sq){
# sample
mu <- 1.6
s <- c(2.22, 0.98, 2.63, 3.33, 1.86, 3.25, 2.25, 2.92, 1.78, 1.01)
likelihood <- 1
for(x in s){
likelihood <- likelihood*1/(sqrt(2*pi*sigma_sq))*exp(-(x-mu)^2/(2*sigma_sq))
}
return(likelihood)
}
# graph likelihoods
curve(l_mu, from = 0, to = 3.2, n = 1000, xlab = expression(mu), ylab = 'Likelihood')
curve(l_ss, from = 0, to = 3, n = 1000, xlab = expression(sigma^2), ylab = 'Likelihood')
# calculate log likelihoods
ll_mu = function(p){
return(log(l_mu(p)))
}
ll_ss = function(p){
return(log(l_ss(p)))
}
# graph log likelihoods
curve(ll_mu, from = 0, to = 3.2, xlab = expression(mu), ylab = 'ln(Likelihood)')
curve(ll_ss, from = 0, to = 3, xlab = expression(mu), ylab = 'ln(Likelihood)')
# find maximum value
optimize(ll_mu, interval = c(0,3.2), maximum = TRUE)
optimize(ll_ss, interval = c(0,3), maximum = TRUE)
# function to use the mle form, not the unbiased var
mle_var <- function(x){
return( sum((x - mean(x))^2)/ length(x))
}
# function to create simulation
sim_norm <- function(M, n, sigma_sq, mu){
# store means and vars
means <- vector()
vs <- vector()
for(i in 1:M){
# create random normal sample
s <- rnorm(n = n, mean = mu, sd = sqrt(sigma_sq))
means <- c(means, mean(s))
vs <- c(vs, mle_var(s))
}
# make dataframe for return
return_df = as.data.frame(means, col.names = 'mean')
return_df['var'] = vs
return(return_df)
}
# M=1000,n=10,\mu=1.6, \sigma^2 = 1
norm_sim1 <- sim_norm(1000, 10, 1, 1.6)
# M=1000,n=1000,\mu=1.6, \sigma^2 = 1
norm_sim2 <- sim_norm(1000, 1000, 1, 1.6)
# plot histograms
hist_means1 <- ggplot(data.frame(norm_sim1$means), aes(norm_sim1$means)) +
geom_histogram(bins = 100, fill='plum1') + labs(title = 'Means Histogram n=10', x=expression(hat(mu)), y='Frequency') + xlim(-0.1, 3)
hist_vars1 <- ggplot(data.frame(norm_sim1$var), aes(norm_sim1$var)) +
geom_histogram(bins = 100, fill='slategray1') + labs(title = 'Vars Histogram n=10', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
hist_means2 <- ggplot(data.frame(norm_sim2$means), aes(norm_sim2$means)) +
geom_histogram(bins = 100, fill='plum3') + labs(title = 'Means Histogram n=1000', x=expression(hat(mu)), y='Frequency')+ xlim(-0.1, 3)
hist_vars2 <- ggplot(data.frame(norm_sim2$var), aes(norm_sim2$var)) +
geom_histogram(bins = 100, fill='slategray3') + labs(title = 'Vars Histogram n=1000', x=expression(hat(sigma^2)), y='Frequency')+ xlim(-0.1, 3)
grid.arrange(hist_means1, hist_vars1, hist_means2, hist_vars2, nrow=2, ncol=2)
rmarkdown::render('kh694_hw3.Rmd')
getwd()
setwd('/Users/kateharline/Documents/class_sp19/quant_gen')
rmarkdown::render('kh694_hw3.Rmd')
rmarkdown::render('kh694_hw3.Rmd')
knitr::opts_chunk$set(echo = TRUE)
a <- 3+3
a
a <- 3+3
a
a <- 3+3
a
